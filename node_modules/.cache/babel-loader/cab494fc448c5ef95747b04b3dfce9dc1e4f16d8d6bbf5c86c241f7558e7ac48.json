{"ast":null,"code":"import bug from './images/Bug.png';\nimport dark from './images/Dark.png';\nimport dragon from './images/Dragon.png';\nimport electric from './images/Electric.png';\nimport fairy from './images/Fairy.png';\nimport fighting from './images/Fighting.png';\nimport fire from './images/Fire.png';\nimport flying from './images/Flying.png';\nimport ghost from './images/Ghost.png';\nimport grass from './images/Grass.png';\nimport ground from './images/Ground.png';\nimport ice from './images/Ice.png';\nimport normal from './images/Normal.png';\nimport poison from './images/Poison.png';\nimport psychic from './images/Psychic.png';\nimport rock from './images/Rock.png';\nimport steel from './images/Steel.png';\nimport water from './images/Water.png';\n\n// Get a random index ranging from 0 (inclusive) to max (exclusive).\nconst getRandomIndex = max => Math.floor(Math.random() * max);\n\n// Shuffle an array of cards\nconst shuffleCards = cards => {\n  // Loop over the card deck array once\n  for (let currentIndex = 0; currentIndex < cards.length; currentIndex += 1) {\n    // Select a random index in the deck\n    const randomIndex = getRandomIndex(cards.length);\n    // Select the card that corresponds to randomIndex\n    const randomCard = cards[randomIndex];\n    // Select the card that corresponds to currentIndex\n    const currentCard = cards[currentIndex];\n    // Swap positions of randomCard and currentCard in the deck\n    cards[currentIndex] = randomCard;\n    cards[randomIndex] = currentCard;\n  }\n  // Return the shuffled deck\n  return cards;\n};\nconst makeDeck = () => {\n  // Initialise an empty deck array\n  const newDeck = [];\n  // Initialise an array of the 19 types in our deck. We will loop over this array.\n  const types = [null, \"Normal\", \"Fighting\", \"Psychic\", \"Dark\", \"Ghost\", \"Bug\", \"Dragon\", \"Flying\", \"Fairy\", \"Rock\", \"Ground\", \"Steel\", \"Poison\", \"Grass\", \"Water\", \"Ice\", \"Electric\", \"Fire\"];\n  const images = [null, normal, fighting, psychic, dark, ghost, bug, dragon, flying, fairy, rock, ground, steel, poison, grass, water, ice, electric, fire];\n\n  // Loop over the suits array\n  for (let typeIndex = 0; typeIndex < types.length; typeIndex += 1) {\n    // Store the current suit in a variable\n    const currentSuit = types[typeIndex];\n    let img = document.createElement(\"img\");\n    img.src = images[typeIndex];\n    img.width = \"200px\";\n    img.height = \"auto\";\n    img.alt = types[typeIndex] + \" type\";\n\n    // Create a new card with the current index and type\n    const card = {\n      index: typeIndex,\n      type: currentSuit,\n      image: img\n    };\n\n    // Add the new card to the deck\n    newDeck.push(card);\n  }\n\n  // Return the completed card deck\n  return newDeck;\n};\n\n// Export functionality to create a shuffled 19-card deck\nexport const makeShuffledDeck = () => shuffleCards(makeDeck());\n// export const getIndex = (card)=> card.index;","map":{"version":3,"names":["bug","dark","dragon","electric","fairy","fighting","fire","flying","ghost","grass","ground","ice","normal","poison","psychic","rock","steel","water","getRandomIndex","max","Math","floor","random","shuffleCards","cards","currentIndex","length","randomIndex","randomCard","currentCard","makeDeck","newDeck","types","images","typeIndex","currentSuit","img","document","createElement","src","width","height","alt","card","index","type","image","push","makeShuffledDeck"],"sources":["/home/ntu_cosmo/pokemon-mini-game/src/utils.js"],"sourcesContent":["import bug from './images/Bug.png'\nimport dark from './images/Dark.png'\nimport dragon from './images/Dragon.png'\nimport electric from './images/Electric.png'\nimport fairy from './images/Fairy.png'\nimport fighting from './images/Fighting.png'\nimport fire from './images/Fire.png'\nimport flying from './images/Flying.png'\nimport ghost from './images/Ghost.png'\nimport grass from './images/Grass.png'\nimport ground from './images/Ground.png'\nimport ice from './images/Ice.png'\nimport normal from './images/Normal.png'\nimport poison from './images/Poison.png'\nimport psychic from './images/Psychic.png'\nimport rock from './images/Rock.png'\nimport steel from './images/Steel.png'\nimport water from './images/Water.png'\n\n// Get a random index ranging from 0 (inclusive) to max (exclusive).\nconst getRandomIndex = (max) => Math.floor(Math.random() * max);\n\n// Shuffle an array of cards\nconst shuffleCards = (cards) => {\n  // Loop over the card deck array once\n  for (let currentIndex = 0; currentIndex < cards.length; currentIndex += 1) {\n    // Select a random index in the deck\n    const randomIndex = getRandomIndex(cards.length);\n    // Select the card that corresponds to randomIndex\n    const randomCard = cards[randomIndex];\n    // Select the card that corresponds to currentIndex\n    const currentCard = cards[currentIndex];\n    // Swap positions of randomCard and currentCard in the deck\n    cards[currentIndex] = randomCard;\n    cards[randomIndex] = currentCard;\n  }\n  // Return the shuffled deck\n  return cards;\n};\n\nconst makeDeck = () => {\n  // Initialise an empty deck array\n  const newDeck = [];\n  // Initialise an array of the 19 types in our deck. We will loop over this array.\n  const types = [null,\"Normal\",\"Fighting\",\"Psychic\",\"Dark\",\"Ghost\",\"Bug\",\"Dragon\",\n                \"Flying\",\"Fairy\",\"Rock\",\"Ground\",\"Steel\",\"Poison\",\"Grass\",\"Water\",\"Ice\",\n                \"Electric\",\"Fire\"];\n  \n  const images = [null,normal,fighting,psychic,dark,ghost,bug,dragon,flying,fairy,\n                  rock,ground,steel,poison,grass,water,ice,electric,fire]\n\n  \n  // Loop over the suits array\n  for (let typeIndex = 0; typeIndex < types.length; typeIndex += 1) {\n    // Store the current suit in a variable\n    const currentSuit = types[typeIndex];\n    let img = document.createElement(\"img\");\n    img.src = images[typeIndex];\n    img.width= \"200px\";\n    img.height= \"auto\";\n    img.alt=types[typeIndex]+\" type\";\n    \n\n      // Create a new card with the current index and type\n      const card = {\n        index: typeIndex,\n        type: currentSuit,\n        image: img,\n        \n      };\n\n      // Add the new card to the deck\n      newDeck.push(card);\n    \n  }\n\n  // Return the completed card deck\n  return newDeck;\n};\n\n// Export functionality to create a shuffled 19-card deck\nexport const makeShuffledDeck = () => shuffleCards(makeDeck());\n// export const getIndex = (card)=> card.index;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}