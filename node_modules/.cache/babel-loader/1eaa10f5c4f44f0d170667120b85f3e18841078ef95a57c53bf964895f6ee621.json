{"ast":null,"code":"// Get a random index ranging from 0 (inclusive) to max (exclusive).\nconst getRandomIndex = max => Math.floor(Math.random() * max);\n\n// Shuffle an array of cards\nconst shuffleCards = cards => {\n  // Loop over the card deck array once\n  for (let currentIndex = 0; currentIndex < cards.length; currentIndex += 1) {\n    // Select a random index in the deck\n    const randomIndex = getRandomIndex(cards.length);\n    // Select the card that corresponds to randomIndex\n    const randomCard = cards[randomIndex];\n    // Select the card that corresponds to currentIndex\n    const currentCard = cards[currentIndex];\n    // Swap positions of randomCard and currentCard in the deck\n    cards[currentIndex] = randomCard;\n    cards[randomIndex] = currentCard;\n  }\n  // Return the shuffled deck\n  return cards;\n};\nexport const makeDeck = () => {\n  // Initialise an empty deck array\n  const newDeck = [];\n  // Initialise an array of the 19 types in our deck. We will loop over this array.\n  const types = [null, \"Normal\", \"Fighting\", \"Psychic\", \"Dark\", \"Ghost\", \"Bug\", \"Dragon\", \"Flying\", \"Fairy\", \"Rock\", \"Ground\", \"Steel\", \"Poison\", \"Grass\", \"Water\", \"Ice\", \"Electric\", \"Fire\"];\n\n  // Loop over the suits array\n  for (let typeIndex = 0; typeIndex < types.length; typeIndex += 1) {\n    // Store the current suit in a variable\n    const currentSuit = types[typeIndex];\n\n    // Create a new card with the current index and type\n    const card = {\n      index: typeIndex,\n      type: currentSuit\n    };\n\n    // Add the new card to the deck\n    newDeck.push(card);\n  }\n\n  // Return the completed card deck\n  return newDeck;\n};\n\n// Export functionality to create a shuffled 19-card deck\nexport const makeShuffledDeck = () => shuffleCards(makeDeck());\n\n// export const getIndex = (card)=> card.index;","map":{"version":3,"names":["getRandomIndex","max","Math","floor","random","shuffleCards","cards","currentIndex","length","randomIndex","randomCard","currentCard","makeDeck","newDeck","types","typeIndex","currentSuit","card","index","type","push","makeShuffledDeck"],"sources":["/home/ntu_cosmo/pokemon-mini-game/src/utils.js"],"sourcesContent":["// Get a random index ranging from 0 (inclusive) to max (exclusive).\nconst getRandomIndex = (max) => Math.floor(Math.random() * max);\n\n// Shuffle an array of cards\nconst shuffleCards = (cards) => {\n  // Loop over the card deck array once\n  for (let currentIndex = 0; currentIndex < cards.length; currentIndex += 1) {\n    // Select a random index in the deck\n    const randomIndex = getRandomIndex(cards.length);\n    // Select the card that corresponds to randomIndex\n    const randomCard = cards[randomIndex];\n    // Select the card that corresponds to currentIndex\n    const currentCard = cards[currentIndex];\n    // Swap positions of randomCard and currentCard in the deck\n    cards[currentIndex] = randomCard;\n    cards[randomIndex] = currentCard;\n  }\n  // Return the shuffled deck\n  return cards;\n};\nexport const makeDeck = () => {\n  // Initialise an empty deck array\n  const newDeck = [];\n  // Initialise an array of the 19 types in our deck. We will loop over this array.\n  const types = [\n    null,\n    \"Normal\",\n    \"Fighting\",\n    \"Psychic\",\n    \"Dark\",\n    \"Ghost\",\n    \"Bug\",\n    \"Dragon\",\n    \"Flying\",\n    \"Fairy\",\n    \"Rock\",\n    \"Ground\",\n    \"Steel\",\n    \"Poison\",\n    \"Grass\",\n    \"Water\",\n    \"Ice\",\n    \"Electric\",\n    \"Fire\",\n  ];\n\n  // Loop over the suits array\n  for (let typeIndex = 0; typeIndex < types.length; typeIndex += 1) {\n    // Store the current suit in a variable\n    const currentSuit = types[typeIndex];\n\n    // Create a new card with the current index and type\n    const card = {\n      index: typeIndex,\n      type: currentSuit,\n    };\n\n    // Add the new card to the deck\n    newDeck.push(card);\n  }\n\n  // Return the completed card deck\n  return newDeck;\n};\n\n// Export functionality to create a shuffled 19-card deck\nexport const makeShuffledDeck = () => shuffleCards(makeDeck());\n\n// export const getIndex = (card)=> card.index;\n"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAIC,GAAG,IAAKC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,GAAG,CAAC;;AAE/D;AACA,MAAMI,YAAY,GAAIC,KAAK,IAAK;EAC9B;EACA,KAAK,IAAIC,YAAY,GAAG,CAAC,EAAEA,YAAY,GAAGD,KAAK,CAACE,MAAM,EAAED,YAAY,IAAI,CAAC,EAAE;IACzE;IACA,MAAME,WAAW,GAAGT,cAAc,CAACM,KAAK,CAACE,MAAM,CAAC;IAChD;IACA,MAAME,UAAU,GAAGJ,KAAK,CAACG,WAAW,CAAC;IACrC;IACA,MAAME,WAAW,GAAGL,KAAK,CAACC,YAAY,CAAC;IACvC;IACAD,KAAK,CAACC,YAAY,CAAC,GAAGG,UAAU;IAChCJ,KAAK,CAACG,WAAW,CAAC,GAAGE,WAAW;EAClC;EACA;EACA,OAAOL,KAAK;AACd,CAAC;AACD,OAAO,MAAMM,QAAQ,GAAGA,CAAA,KAAM;EAC5B;EACA,MAAMC,OAAO,GAAG,EAAE;EAClB;EACA,MAAMC,KAAK,GAAG,CACZ,IAAI,EACJ,QAAQ,EACR,UAAU,EACV,SAAS,EACT,MAAM,EACN,OAAO,EACP,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,MAAM,EACN,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,OAAO,EACP,OAAO,EACP,KAAK,EACL,UAAU,EACV,MAAM,CACP;;EAED;EACA,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGD,KAAK,CAACN,MAAM,EAAEO,SAAS,IAAI,CAAC,EAAE;IAChE;IACA,MAAMC,WAAW,GAAGF,KAAK,CAACC,SAAS,CAAC;;IAEpC;IACA,MAAME,IAAI,GAAG;MACXC,KAAK,EAAEH,SAAS;MAChBI,IAAI,EAAEH;IACR,CAAC;;IAED;IACAH,OAAO,CAACO,IAAI,CAACH,IAAI,CAAC;EACpB;;EAEA;EACA,OAAOJ,OAAO;AAChB,CAAC;;AAED;AACA,OAAO,MAAMQ,gBAAgB,GAAGA,CAAA,KAAMhB,YAAY,CAACO,QAAQ,EAAE,CAAC;;AAE9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}