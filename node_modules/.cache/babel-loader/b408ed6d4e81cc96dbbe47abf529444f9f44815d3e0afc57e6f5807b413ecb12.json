{"ast":null,"code":"// Get a random index ranging from 0 (inclusive) to max (exclusive).\nconst getRandomIndex = max => Math.floor(Math.random() * max);\n\n// Shuffle an array of cards\nconst shuffleCards = cards => {\n  // Loop over the card deck array once\n  for (let currentIndex = 0; currentIndex < cards.length; currentIndex += 1) {\n    // Select a random index in the deck\n    const randomIndex = getRandomIndex(cards.length);\n    // Select the card that corresponds to randomIndex\n    const randomCard = cards[randomIndex];\n    // Select the card that corresponds to currentIndex\n    const currentCard = cards[currentIndex];\n    // Swap positions of randomCard and currentCard in the deck\n    cards[currentIndex] = randomCard;\n    cards[randomIndex] = currentCard;\n  }\n  // Return the shuffled deck\n  return cards;\n};\nconst makeDeck = () => {\n  // Initialise an empty deck array\n  const newDeck = [];\n  // Initialise an array of the 19 types in our deck. We will loop over this array.\n  const types = [null, \"Normal\", \"Fighting\", \"Psychic\", \"Dark\", \"Ghost\", \"Bug\", \"Dragon\", \"Flying\", \"Fairy\", \"Rock\", \"Ground\", \"Steel\", \"Poison\", \"Grass\", \"Water\", \"Ice\", \"Electric\", \"Fire\"];\n\n  // Loop over the suits array\n  for (let typeIndex = 0; typeIndex < types.length; typeIndex += 1) {\n    // Store the current suit in a variable\n    const currentSuit = types[typeIndex];\n\n    // Create a new card with the current index and type\n    const card = {\n      index: typeIndex,\n      type: currentSuit\n    };\n\n    // Add the new card to the deck\n    newDeck.push(card);\n  }\n\n  // Return the completed card deck\n  return newDeck;\n};\n\n// Export functionality to create a shuffled 19-card deck\nexport const makeShuffledDeck = () => shuffleCards(makeDeck());\n// export const getIndex = (card)=> card.index;","map":{"version":3,"names":["getRandomIndex","max","Math","floor","random","shuffleCards","cards","currentIndex","length","randomIndex","randomCard","currentCard","makeDeck","newDeck","types","typeIndex","currentSuit","card","index","type","push","makeShuffledDeck"],"sources":["/home/ntu_cosmo/pokemon-mini-game/src/utils.js"],"sourcesContent":["\n\n// Get a random index ranging from 0 (inclusive) to max (exclusive).\nconst getRandomIndex = (max) => Math.floor(Math.random() * max);\n\n// Shuffle an array of cards\nconst shuffleCards = (cards) => {\n  // Loop over the card deck array once\n  for (let currentIndex = 0; currentIndex < cards.length; currentIndex += 1) {\n    // Select a random index in the deck\n    const randomIndex = getRandomIndex(cards.length);\n    // Select the card that corresponds to randomIndex\n    const randomCard = cards[randomIndex];\n    // Select the card that corresponds to currentIndex\n    const currentCard = cards[currentIndex];\n    // Swap positions of randomCard and currentCard in the deck\n    cards[currentIndex] = randomCard;\n    cards[randomIndex] = currentCard;\n  }\n  // Return the shuffled deck\n  return cards;\n};\n\nconst makeDeck = () => {\n  // Initialise an empty deck array\n  const newDeck = [];\n  // Initialise an array of the 19 types in our deck. We will loop over this array.\n  const types = [null,\"Normal\",\"Fighting\",\"Psychic\",\"Dark\",\"Ghost\",\"Bug\",\"Dragon\",\n                \"Flying\",\"Fairy\",\"Rock\",\"Ground\",\"Steel\",\"Poison\",\"Grass\",\"Water\",\"Ice\",\n                \"Electric\",\"Fire\"];\n  \n \n\n  \n  // Loop over the suits array\n  for (let typeIndex = 0; typeIndex < types.length; typeIndex += 1) {\n    // Store the current suit in a variable\n    const currentSuit = types[typeIndex];\n    \n    \n\n      // Create a new card with the current index and type\n      const card = {\n        index: typeIndex,\n        type: currentSuit,\n        \n        \n      };\n\n      // Add the new card to the deck\n      newDeck.push(card);\n    \n  }\n\n  // Return the completed card deck\n  return newDeck;\n};\n\n// Export functionality to create a shuffled 19-card deck\nexport const makeShuffledDeck = () => shuffleCards(makeDeck());\n// export const getIndex = (card)=> card.index;\n"],"mappings":"AAEA;AACA,MAAMA,cAAc,GAAIC,GAAG,IAAKC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,GAAG,CAAC;;AAE/D;AACA,MAAMI,YAAY,GAAIC,KAAK,IAAK;EAC9B;EACA,KAAK,IAAIC,YAAY,GAAG,CAAC,EAAEA,YAAY,GAAGD,KAAK,CAACE,MAAM,EAAED,YAAY,IAAI,CAAC,EAAE;IACzE;IACA,MAAME,WAAW,GAAGT,cAAc,CAACM,KAAK,CAACE,MAAM,CAAC;IAChD;IACA,MAAME,UAAU,GAAGJ,KAAK,CAACG,WAAW,CAAC;IACrC;IACA,MAAME,WAAW,GAAGL,KAAK,CAACC,YAAY,CAAC;IACvC;IACAD,KAAK,CAACC,YAAY,CAAC,GAAGG,UAAU;IAChCJ,KAAK,CAACG,WAAW,CAAC,GAAGE,WAAW;EAClC;EACA;EACA,OAAOL,KAAK;AACd,CAAC;AAED,MAAMM,QAAQ,GAAGA,CAAA,KAAM;EACrB;EACA,MAAMC,OAAO,GAAG,EAAE;EAClB;EACA,MAAMC,KAAK,GAAG,CAAC,IAAI,EAAC,QAAQ,EAAC,UAAU,EAAC,SAAS,EAAC,MAAM,EAAC,OAAO,EAAC,KAAK,EAAC,QAAQ,EACjE,QAAQ,EAAC,OAAO,EAAC,MAAM,EAAC,QAAQ,EAAC,OAAO,EAAC,QAAQ,EAAC,OAAO,EAAC,OAAO,EAAC,KAAK,EACvE,UAAU,EAAC,MAAM,CAAC;;EAKhC;EACA,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAGD,KAAK,CAACN,MAAM,EAAEO,SAAS,IAAI,CAAC,EAAE;IAChE;IACA,MAAMC,WAAW,GAAGF,KAAK,CAACC,SAAS,CAAC;;IAIlC;IACA,MAAME,IAAI,GAAG;MACXC,KAAK,EAAEH,SAAS;MAChBI,IAAI,EAAEH;IAGR,CAAC;;IAED;IACAH,OAAO,CAACO,IAAI,CAACH,IAAI,CAAC;EAEtB;;EAEA;EACA,OAAOJ,OAAO;AAChB,CAAC;;AAED;AACA,OAAO,MAAMQ,gBAAgB,GAAGA,CAAA,KAAMhB,YAAY,CAACO,QAAQ,EAAE,CAAC;AAC9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}